BTP400 Lab #5
Focus: Socket-Based Client/Server Programming
Due: 11:59 pm, March 20 (in 2 weeks from posting)

You are asked to build a TCP/IP socket-based Java application that allows a Java client to retrieve bank accounts from a Bank server.
You should use the Bank and Account classes from Assignment #1.

You may work INDIVIDUALLY or as A TEAM OF 2 people who will evenly share the amount of work. 
Only 1 SUBMISSION from the team is required. 
You must mention the names of the team members at the time of submission, otherwise it will be marked as individual work.

A. Problem Description

Here is a description of the interactions happening between the client and the server programs:

THE CLIENT PROGRAM                                              THE SERVER PROGRAM
        
1. the message shown on the client console:                     1. the message shown on the server console:
    "Welcome to the Bank of <your name>! <date and time>"           "A BankServer instance is running! <date and time>"

2. a) the message shown on the client console:                  2. a) the message shown on the server console:
    "Enter your name: John Doe"                                     "+ name received: John Doe"

2. b) the message shown on the client console:                  2. b) the message shown on the server console:
    "Enter a command (0, 1 or 2): 1"                                "+ command received: 1"

3. -------------------------------------------                  3. The server sends an array of all accounts to the client

4. information about ALL accounts received,                     4. -------------------------------------------------------
    displayed LINE BY LINE as seen below:                          -------------------------------------------------------
    1.  A1234, Peter Liu, $1000.00                                 -------------------------------------------------------
    2.  B5678, Mary Ryan, $2599.00                                 -------------------------------------------------------
    3.  C7890, Michael Jordan, $2599.00                            -------------------------------------------------------
 
5. the message shown on the client console:                     5. the message shown on the server console:
    "Enter a command (0, 1 or 2): 2"                                "+ command received: 2"

6. ----------------------------------------                     6. the server sends the message "What is the balance?" to the client.

7. the message shown on the client console:                     7. ------------------------------------------------------------------
    "# question from the server: What is the balance?"             ------------------------------------------------------------------    

8. the message shown on the client console                      8. the message shown on the server console:
   (after the user has entered the balance):                        "+ balance received: 2599.00"
    2599.00                                                        ----------------------------------------

9. ---------------------------------------------------          9. the server sends an array of accounts to the client;
   ---------------------------------------------------             (all these accounts have the same balance - 2599.00)

10. information about the accounts received,                    10. ---------------------------------------------------
    displayed LINE BY LINE as seen below:                           ---------------------------------------------------
    1.  A1234, Peter Liu, $2599.00                                  ---------------------------------------------------
    2.  B5678, Mary Ryan, $2599.00                                  ---------------------------------------------------
    3.  C7890, Michael Jordan, $2599.00                             ---------------------------------------------------

11. the messages shown on the client console:                   11. the message shown on the server console
    "Enter a command (0, 1 or 2): 0"                                "+ command received: 0"
    "Thank You!"                                                    ---------------------------------------

12. the client stops running.                                   12. the server closes the connection and waits for a new connection.

A. Submission Notes

1.  a) The Bank server must be multi-threaded.

2.  You are required to design and implement a Java class named BankServer. The class should have:
        a) a constructor that takes the port number as a parameter
        b) a method named startServer()

Note: You are welcome to include additional methods if needed. However, you are NOT REQUIRED to implement the toString() and equals() methods.
The MAIN method should create a BankServer instance and start running the server instance. It must NOT include any code that creates Java threads.

3.  Whenever the client sends an integer zero (0) to the server, 
the server will close the client connection and [patiently] wait for a new connection.

4.  The client program may send requests (i.e. commands) repeatedly to the server. 
It will terminate after the user has entered the integer zero (0).

5.  You should use DataInputStream, DataOutputStream, ObjectInputStream and ObjectOutputStream in your implementation.

6.  You must follow these testing requirements:
        a)  Use these command-line instructions to run the server and the client code:
                > java BankServer 8123
                > java SimpleClient 8123

        b)  The Bank object should have at least six (6) accounts, three (3) of them having the same balance.

        c)  You must test your application with two client connections.

B. Submission Requirements

1.  Submit to Blackboard
        - two Java source files (NOT A ZIP FILE)
        - three screenshots (two for the client consoles and one for the server console).

2. After submitting your work to Blackboard, you must give a demo in the computer lab.